import _Object$values from "@babel/runtime-corejs3/core-js-stable/object/values";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _parseInt from "@babel/runtime-corejs3/core-js-stable/parse-int";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";

var _definePropTypeByType, _definePropTypeByType2, _definePropTypeByType4;

/**
 * @since 2018-11-30 13:55
 * @author vivaxy
 */
import React from 'react';
import PropTypes from 'prop-types';
import cls from 'classnames';
import serviceTextMap from '../common/service-text-map.js';
import * as services from '../common/services.js';
import * as types from '../common/types.js';
import toFixed from '../common/to-fixed.js';
import "../style/index.css";
import { prefixCls } from '@seed/ui-base';

function Service(_ref) {
  var value = _ref.value;
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'service'), prefixCls('tag', 'service', value))
  }, serviceTextMap[value]);
}

Service.propTypes = {
  value: function value(props, propName, componentName) {
    if (!serviceTextMap.hasOwnProperty(props[propName])) {
      var _context, _context2;

      throw new Error(_concatInstanceProperty(_context = _concatInstanceProperty(_context2 = "Invalid prop `".concat(propName, "` of value `")).call(_context2, props[propName], "` supplied to `")).call(_context, componentName, "`, expected one of `Tag.services`"));
    }
  }
};

function RankingHorizontal(_ref2) {
  var value = _ref2.value;
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'ranking-horizontal'), prefixCls('tag', 'ranking', value < 4 ? 'red' : 'yellow'))
  }, "TOP ", value);
}

RankingHorizontal.propTypes = {
  value: function value(props, propName, componentName) {
    if (typeof props[propName] !== 'number' || _parseInt(props[propName]) !== props[propName] || props[propName] < 1 || props[propName] > 9) {
      var _context3, _context4;

      throw new Error(_concatInstanceProperty(_context3 = _concatInstanceProperty(_context4 = "Invalid prop `".concat(propName, "` of value `")).call(_context4, props[propName], "` supplied to `")).call(_context3, componentName, "`, expected an integer from 1 to 9."));
    }
  }
};

function RankingVertical(_ref3) {
  var value = _ref3.value;
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'ranking-vertical'), prefixCls('tag', 'ranking', value < 4 ? 'red' : 'yellow'))
  }, React.createElement("div", {
    className: cls(prefixCls('tag', 'ranking-vertical-top'))
  }, "TOP"), React.createElement("div", {
    className: cls(prefixCls('tag', 'ranking-vertical-ranking'))
  }, toFixed(value, 2)));
}

RankingVertical.propTypes = {
  value: function value(props, propName, componentName) {
    if (typeof props[propName] !== 'number' || _parseInt(props[propName]) !== props[propName] || props[propName] < 1 || props[propName] > 99) {
      var _context5, _context6;

      throw new Error(_concatInstanceProperty(_context5 = _concatInstanceProperty(_context6 = "Invalid prop `".concat(propName, "` of value `")).call(_context6, props[propName], "` supplied to `")).call(_context5, componentName, "`, expected an integer from 1 to 99."));
    }
  }
};

function ChainCertification() {
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'chain-certification'))
  }, "\u8FDE\u9501\u8BA4\u8BC1");
}

function BlackPearl() {
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'black-pearl'))
  });
}

function MustEatList() {
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'must-eat-list'))
  });
}

function MustLiveList() {
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'must-live-list'))
  });
}

function MustStrollList() {
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'must-stroll-list'))
  });
}

function MustPlayList() {
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'must-play-list'))
  });
}

function MustGoList() {
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'must-go-list'))
  });
}

function Primary(_ref4) {
  var size = _ref4.size,
      children = _ref4.children;
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'primary'), prefixCls('tag', 'primary', size))
  }, children);
}

Primary.propTypes = {
  size: PropTypes.oneOf(['lg', 'md']),
  children: PropTypes.node.isRequired
};
Primary.defaultProps = {
  size: 'md'
};

function Disabled(_ref5) {
  var size = _ref5.size,
      children = _ref5.children;
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'disabled'), prefixCls('tag', 'disabled', size))
  }, children);
}

Disabled.propTypes = {
  size: PropTypes.oneOf(['lg', 'md']),
  children: PropTypes.node.isRequired
};
Disabled.defaultProps = {
  size: 'md'
};

function Flat(_ref6) {
  var bordered = _ref6.bordered,
      children = _ref6.children;
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'flat'), _defineProperty({}, prefixCls('tag', 'flat', 'bordered'), bordered))
  }, children);
}

Flat.propTypes = {
  bordered: PropTypes.bool,
  children: PropTypes.node.isRequired
};
Flat.defaultProps = {
  bordered: false
};

function Secondary(_ref7) {
  var children = _ref7.children;
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'secondary'))
  }, children);
}

Secondary.propTypes = {
  children: PropTypes.node.isRequired
};

function Ghost(_ref8) {
  var children = _ref8.children;
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'ghost'))
  }, children);
}

Ghost.propTypes = {
  children: PropTypes.node.isRequired
};

function FlatBlack(_ref9) {
  var children = _ref9.children;
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'flat-black'))
  }, children);
}

FlatBlack.propTypes = {
  children: PropTypes.node.isRequired
};

function HashTag() {
  return React.createElement("div", {
    className: prefixCls('tag', 'topic-hash-tag')
  }, React.createElement("div", {
    className: prefixCls('tag', 'topic-hash-tag', 'vertical')
  }), React.createElement("div", {
    className: prefixCls('tag', 'topic-hash-tag', 'horizontal')
  }));
}

function Topic(_ref10) {
  var children = _ref10.children;
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'topic'))
  }, React.createElement(HashTag, null), React.createElement("div", {
    className: cls(prefixCls('tag', 'topic-text'))
  }, children));
}

Topic.propTypes = {
  children: PropTypes.node.isRequired
};

function TopQualityReview(_ref11) {
  var size = _ref11.size;
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'top-quality-review'), prefixCls('tag', 'top-quality-review', size))
  });
}

TopQualityReview.propType = {
  size: PropTypes.oneOf(['lg', 'md'])
};
TopQualityReview.defaultProps = {
  size: 'md'
};

function Level(_ref12) {
  var value = _ref12.value;
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'level'), prefixCls('tag', 'level', value))
  });
}

Level.propTypes = {
  value: function value(props, propName, componentName) {
    if (typeof props[propName] !== 'number' || _parseInt(props[propName]) !== props[propName] || props[propName] < 1 || props[propName] > 8) {
      var _context7, _context8;

      throw new Error(_concatInstanceProperty(_context7 = _concatInstanceProperty(_context8 = "Invalid prop `".concat(propName, "` of value `")).call(_context8, props[propName], "` supplied to `")).call(_context7, componentName, "`, expected an integer from 1 to 8."));
    }
  }
};

function Vip(_ref13) {
  var value = _ref13.value,
      size = _ref13.size;
  return React.createElement("div", {
    className: cls(prefixCls('tag'), prefixCls('tag', 'vip'), prefixCls('tag', 'vip', value), prefixCls('tag', 'vip', size))
  });
}

Vip.propTypes = {
  value: PropTypes.oneOf(['red', 'orange', 'blue']).isRequired,
  size: PropTypes.oneOf([24, 34, 38, 42]).isRequired
};
export default function Tag(_ref14) {
  var type = _ref14.type,
      value = _ref14.value,
      size = _ref14.size,
      bordered = _ref14.bordered,
      children = _ref14.children;

  if (type === types.SERVICE) {
    return React.createElement(Service, {
      value: value
    });
  }

  if (type === types.RANKING_HORIZONTAL) {
    return React.createElement(RankingHorizontal, {
      value: value
    });
  }

  if (type === types.RANKING_VERTICAL) {
    return React.createElement(RankingVertical, {
      value: value
    });
  }

  if (type === types.CHAIN_CERTIFICATION) {
    return React.createElement(ChainCertification, null);
  }

  if (type === types.BLACK_PEARL) {
    return React.createElement(BlackPearl, null);
  }

  if (type === types.MUST_EAT_LIST) {
    return React.createElement(MustEatList, null);
  }

  if (type === types.MUST_LIVE_LIST) {
    return React.createElement(MustLiveList, null);
  }

  if (type === types.MUST_STROLL_LIST) {
    return React.createElement(MustStrollList, null);
  }

  if (type === types.MUST_PLAY_LIST) {
    return React.createElement(MustPlayList, null);
  }

  if (type === types.MUST_GO_LIST) {
    return React.createElement(MustGoList, null);
  }

  if (type === types.PRIMARY) {
    return React.createElement(Primary, {
      size: size
    }, children);
  }

  if (type === types.DISABLED) {
    return React.createElement(Disabled, {
      size: size
    }, children);
  }

  if (type === types.FLAT) {
    return React.createElement(Flat, {
      bordered: bordered
    }, children);
  }

  if (type === types.SECONDARY) {
    return React.createElement(Secondary, null, children);
  }

  if (type === types.GHOST) {
    return React.createElement(Ghost, null, children);
  }

  if (type === types.FLAT_BLACK) {
    return React.createElement(FlatBlack, null, children);
  }

  if (type === types.TOPIC) {
    return React.createElement(Topic, null, children);
  }

  if (type === types.TOP_QUALITY_REVIEW) {
    return React.createElement(TopQualityReview, {
      size: size
    });
  }

  if (type === types.LEVEL) {
    return React.createElement(Level, {
      value: value
    });
  }

  if (type === types.VIP) {
    return React.createElement(Vip, {
      value: value,
      size: size
    });
  }
}
Tag.types = types;
Tag.services = services;
Tag.propTypes = {
  type: PropTypes.oneOf(_Object$values(types)).isRequired,
  value: definePropTypeByType((_definePropTypeByType = {}, _defineProperty(_definePropTypeByType, types.SERVICE, Service), _defineProperty(_definePropTypeByType, types.RANKING_HORIZONTAL, RankingHorizontal), _defineProperty(_definePropTypeByType, types.RANKING_VERTICAL, RankingVertical), _defineProperty(_definePropTypeByType, types.LEVEL, Level), _defineProperty(_definePropTypeByType, types.VIP, Vip), _definePropTypeByType)),
  size: definePropTypeByType((_definePropTypeByType2 = {}, _defineProperty(_definePropTypeByType2, types.PRIMARY, Primary), _defineProperty(_definePropTypeByType2, types.TOP_QUALITY_REVIEW, TopQualityReview), _defineProperty(_definePropTypeByType2, types.VIP, Vip), _definePropTypeByType2)),
  bordered: definePropTypeByType(_defineProperty({}, types.FLAT, Flat)),
  children: definePropTypeByType((_definePropTypeByType4 = {}, _defineProperty(_definePropTypeByType4, types.PRIMARY, Primary), _defineProperty(_definePropTypeByType4, types.DISABLED, Disabled), _defineProperty(_definePropTypeByType4, types.SECONDARY, Secondary), _defineProperty(_definePropTypeByType4, types.GHOST, Ghost), _defineProperty(_definePropTypeByType4, types.FLAT_BLACK, FlatBlack), _defineProperty(_definePropTypeByType4, types.TOPIC, Topic), _definePropTypeByType4))
};

function definePropTypeByType(typeComponentMap) {
  var typeKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'type';
  return function (props, propName, componentName) {
    if (typeComponentMap.hasOwnProperty(props[typeKey])) {
      return PropTypes.checkPropTypes(typeComponentMap[props[typeKey]].propTypes, props, propName, componentName);
    }
  };
}