"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.mixin = void 0;

var _uiBase = require("@seed/ui-base");

/**
 * @since 2018-12-25 22:22
 * @author vivaxy
 */
var getHandlerXByValue = function getHandlerXByValue(progressWidth, marks, value) {
  return progressWidth / (marks.length - 1) * value;
};

var mixin = function mixin(ins) {
  ins.classes = {
    slider: (0, _uiBase.prefixCls)('slider'),
    container: (0, _uiBase.prefixCls)('slider', 'container'),
    progress: (0, _uiBase.prefixCls)('slider', 'progress'),
    progressInactive: (0, _uiBase.prefixCls)('slider', 'progress-inactive'),
    marks: (0, _uiBase.prefixCls)('slider', 'marks'),
    markItem: (0, _uiBase.prefixCls)('slider', 'mark-item'),
    markPoint: (0, _uiBase.prefixCls)('slider', 'mark-point'),
    markText: (0, _uiBase.prefixCls)('slider', 'mark-text'),
    handler: (0, _uiBase.prefixCls)('slider', 'handler'),
    handlerBar: (0, _uiBase.prefixCls)('slider', 'handler-bar')
  }; // touch life circle

  ins.handlerStartClientX = null;
  ins.handlerStartX = null; // component life circle

  ins.progressEl = null;
  ins.handlerEl = null;
  ins.handlerWidth = null;
  ins.progressWidth = null;

  ins.getWidth = function () {
    var handlerEl = ins.isReactComponent ? ins.handlerEl : ins.$refs.handlerEl;
    var progressEl = ins.isReactComponent ? ins.progressEl : ins.$refs.progressEl;

    var _handlerEl$getBoundin = handlerEl.getBoundingClientRect(),
        handlerWidth = _handlerEl$getBoundin.width;

    var _progressEl$getBoundi = progressEl.getBoundingClientRect(),
        progressWidth = _progressEl$getBoundi.width;

    ins.handlerWidth = handlerWidth;
    ins.progressWidth = progressWidth;
  };

  ins.updateHandlerX = function (handlerX) {
    if (ins.isReactComponent) {
      ins.setState({
        handlerX: handlerX
      });
    } else {
      ins.handlerX = handlerX;
    }
  };

  ins.emitChange = function (value) {
    if (ins.isReactComponent) {
      ins.props.onChange(value);
    } else {
      ins.$emit('change', value);
    }
  };

  ins.whenMount = function () {
    ins.getWidth();
    window.addEventListener('resize', ins.whenResize);
    var marks = ins.isReactComponent ? ins.props.marks : ins.marks;
    var value = ins.isReactComponent ? ins.props.value : ins.value;
    var handlerX = getHandlerXByValue(ins.progressWidth, marks, value);
    ins.updateHandlerX(handlerX);
  };

  ins.whenUpdateProps = function (marks, value) {
    var handlerX = getHandlerXByValue(ins.progressWidth, marks, value);
    ins.updateHandlerX(handlerX);
  };

  ins.whenResize = function () {
    ins.getWidth();
    var marks = ins.isReactComponent ? ins.props.marks : ins.marks;
    var value = ins.isReactComponent ? ins.props.value : ins.value;
    ins.whenUpdateProps(marks, value);
  };

  ins.whenUnmount = function () {
    ins.handlerWidth = null;
    ins.progressWidth = null;
    window.removeEventListener('resize', ins.whenResize);
  };

  ins.handleTouchStart = function (e) {
    ins.handlerStartClientX = e.changedTouches[0].clientX;
    ins.handlerStartX = ins.isReactComponent ? ins.state.handlerX : ins.handlerX;
  };

  ins.handleTouchMove = function (e) {
    if (e.changedTouches.length !== 1) {
      return; // not standard touch move
    }

    var newHandlerX = e.changedTouches[0].clientX - ins.handlerStartClientX + ins.handlerStartX;

    if (newHandlerX < 0) {
      newHandlerX = 0;
    }

    if (newHandlerX > ins.progressWidth) {
      newHandlerX = ins.progressWidth;
    }

    ins.updateHandlerX(newHandlerX);
  };

  ins.getCurrentValue = function () {
    var marks = ins.isReactComponent ? ins.props.marks : ins.marks;
    var handlerX = ins.isReactComponent ? ins.state.handlerX : ins.handlerX;
    var eachMarkWidth = ins.progressWidth / (marks.length - 1);
    return Math.floor(handlerX / eachMarkWidth);
  };

  ins.getSiblingValue = function () {
    var marks = ins.isReactComponent ? ins.props.marks : ins.marks;
    var handlerX = ins.isReactComponent ? ins.state.handlerX : ins.handlerX;
    var eachMarkWidth = ins.progressWidth / (marks.length - 1);
    var currentValue = Math.floor(handlerX / eachMarkWidth);
    var remaining = handlerX % eachMarkWidth;

    if (remaining > eachMarkWidth / 2) {
      // to right
      return currentValue + 1;
    } else {// to left
    }

    return currentValue;
  };

  ins.handleTouchEnd = function (e) {
    if (e.changedTouches.length !== 1) {
      return;
    }

    ins.handlerStartClientX = null;
    ins.handlerStartX = null;
    var progressWidth = ins.progressWidth;
    var handlerX = ins.isReactComponent ? ins.state.handlerX : ins.handlerX;
    var marks = ins.isReactComponent ? ins.props.marks : ins.marks;
    var siblingValue = ins.getSiblingValue();
    var value = ins.isReactComponent ? ins.props.value : ins.value;

    if (siblingValue !== value) {
      ins.emitChange(siblingValue);
    } else {
      var newHandlerX = getHandlerXByValue(progressWidth, marks, siblingValue);

      if (handlerX !== newHandlerX) {
        ins.updateHandlerX(newHandlerX);
      }
    }
  };
};

exports.mixin = mixin;