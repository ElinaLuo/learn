import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { prefixCls } from '@seed/ui-base';
import "../style/srcoll-num.css";

var ScrollNum =
/*#__PURE__*/
function (_Component) {
  _inherits(ScrollNum, _Component);

  function ScrollNum(options) {
    var _this;

    _classCallCheck(this, ScrollNum);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrollNum).call(this, options));
    _this.numArr = [9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
    _this.lastNum = 0;
    _this.state = {
      nums: _this.getNumChange(_this.props.count).lastNums
    };
    return _this;
  }

  _createClass(ScrollNum, [{
    key: "getNums",
    value: function getNums(num) {
      var _context;

      var currentNums = _mapInstanceProperty(_context = num.toString().split('')).call(_context, function (n) {
        return {
          val: Number(n)
        };
      });

      return currentNums;
    } // props发生改变

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(newProps) {
      var _this2 = this;

      var count = newProps.count;

      var _this$getNumChange = this.getNumChange(count),
          currentNums = _this$getNumChange.currentNums,
          lastNums = _this$getNumChange.lastNums;

      this.timeOutHandle = _setTimeout(function () {
        _this2.setState({
          nums: currentNums
        });
      }, 300);
      this.setState({
        nums: lastNums
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.timeOutHandle);
    }
  }, {
    key: "getNumChange",
    value: function getNumChange(count) {
      if (!this.lastNum) this.lastNum = count;
      var currentNums = this.getNums(count);
      var lastNums = this.getNums(this.lastNum); // 位数没有变化

      if (currentNums.length == lastNums.length) {
        // 数字变大
        if (count > this.lastNum) {
          _forEachInstanceProperty(lastNums).call(lastNums, function (num, index) {
            if (currentNums[index].val !== lastNums[index].val) {
              num.inc = true;
            }
          });
        } else if (count < this.lastNum) {
          _forEachInstanceProperty(lastNums).call(lastNums, function (num, index) {
            if (currentNums[index].val !== lastNums[index].val) {
              num.dec = true;
            }
          });
        }
      } else if (count > this.lastNum) {
        // 全部数字增加
        _forEachInstanceProperty(lastNums).call(lastNums, function (n) {
          n.inc = true;
        });
      } else {
        // 全部数字减小
        _forEachInstanceProperty(lastNums).call(lastNums, function (n) {
          n.dec = true;
        });
      }

      this.lastNum = count;
      return {
        lastNums: lastNums,
        currentNums: currentNums
      };
    }
  }, {
    key: "getNumCSS",
    value: function getNumCSS(num, active) {
      var cssName = 'seed-num ';
      if (num.inc) cssName += 'seed-increase ';
      if (num.dec) cssName += 'seed-decrease ';
      if (active) cssName += 'seed-active ';
      return cssName;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var active = this.props.active;
      var nums = this.state.nums;
      return React.createElement("div", {
        className: "seed-num-wrap"
      }, _mapInstanceProperty(nums).call(nums, function (num, index) {
        return React.createElement("div", {
          className: _this3.getNumCSS(num, active),
          key: index
        }, React.createElement("div", {
          className: prefixCls('dec')
        }, _this3.numArr[num.val]), React.createElement("div", {
          className: prefixCls('me')
        }, _this3.numArr[num.val + 1]), React.createElement("div", {
          className: prefixCls('inc')
        }, _this3.numArr[num.val + 2]));
      }));
    }
  }]);

  return ScrollNum;
}(Component);

export { ScrollNum as default };
ScrollNum.propTypes = {
  active: PropTypes.bool.isRequired,
  count: PropTypes.number.isRequired
};