import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cls from 'classnames';
import "../style/index.css";

var PageControl =
/*#__PURE__*/
function (_Component) {
  _inherits(PageControl, _Component);

  function PageControl() {
    _classCallCheck(this, PageControl);

    return _possibleConstructorReturn(this, _getPrototypeOf(PageControl).apply(this, arguments));
  }

  _createClass(PageControl, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          size = _this$props.size,
          selectedColor = _this$props.selectedColor,
          color = _this$props.color,
          count = _this$props.count,
          selectedIndex = _this$props.selectedIndex;
      var navWrapperCls = cls({
        'seed-page-control': true,
        'seed-page-control--sm': size === 'sm'
      });
      var navItemCls = cls({
        'seed-page-control__item': true,
        'seed-page-control__item--sm': size === 'sm'
      });
      return React.createElement("ul", {
        className: navWrapperCls
      }, _Array$from(Array(count), function (_, index) {
        return React.createElement("li", {
          className: cls(navItemCls, {
            'seed-page-control__item--selected': index == selectedIndex
          }),
          style: {
            backgroundColor: index == selectedIndex ? selectedColor : color
          }
        });
      }));
    }
  }]);

  return PageControl;
}(Component);

export { PageControl as default };
PageControl.propTypes = {
  size: PropTypes.oneOf(['lg', 'sm']),
  selectedColor: PropTypes.string,
  color: PropTypes.string,
  count: PropTypes.number,
  selectedIndex: PropTypes.number
};