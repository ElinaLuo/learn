import { prefixCls } from '@seed/ui-base';
import { _ as __vue_normalize__ } from '../../normalize-component-19a2903f.js';
import '../style/index.css';

//

var script = {
  name: 'novice-guidance',
  props: {
    type: {
      type: String,
      default: 'rectangle',
      validator: function validator(value) {
        return ['rectangle', 'circle'].includes(value);
      },
    },
    show: {
      type: Boolean,
      default: false,
    },
    autoHideTimeout: {
      type: Number,
      default: 5000,
    },
    arrowPosition: {
      type: Number,
      default: 50,
    },
    flipArrow: {
      type: Boolean,
      default: false,
    },
  },
  data: function data() {
    return {
      dataShow: this.show,
      visible: false,
    };
  },
  mounted: function mounted() {
    var ref = this;
    var autoHideTimeout = ref.autoHideTimeout;
    var show = ref.show;
    if (show && autoHideTimeout) {
      this.setAutoHide();
    }
    if (show) {
      this.startToShow();
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.clearAutoHideTimeout();
  },
  watch: {
    show: function show(newVal, oldVal) {
      if (newVal === oldVal) {
        return;
      }
      if (newVal) {
        this.dataShow = newVal;
        this.startToShow();
      } else {
        this.visible = false;
      }
    },
  },
  computed: {
    classes: function classes() {
      return {
        wrap: prefixCls('novice-guidance', 'wrap'),
        arrow: [
          prefixCls('novice-guidance', 'arrow'),
          this.flipArrow && prefixCls('novice-guidance', 'arrow', 'flipped') ],
        close: prefixCls('novice-guidance', 'close'),
        outer: [
          prefixCls('novice-guidance'),
          prefixCls(
            'novice-guidance',
            this.type === 'circle' ? 'circle' : 'rectangle'
          ),
          this.visible && prefixCls('novice-guidance', 'fadein') ],
        text: prefixCls('novice-guidance', 'text'),
      };
    },
  },
  methods: {
    handleClose: function handleClose() {
      this.visible = false;
    },
    handleTransitionEnd: function handleTransitionEnd() {
      var ref = this;
      var show = ref.show;
      var autoHideTimeout = ref.autoHideTimeout;
      if (show) {
        if (autoHideTimeout) {
          this.setAutoHide();
        }
        this.$emit('show');
      } else {
        this.dataShow = false;
        this.$emit('hide');
      }
    },
    setAutoHide: function setAutoHide() {
      var this$1 = this;

      var ref = this;
      var autoHideTimeout = ref.autoHideTimeout;
      this.timeout = setTimeout(function () {
        this$1.dataShow = false;
        this$1.clearAutoHideTimeout();
        this$1.$emit('hide');
      }, autoHideTimeout);
    },
    clearAutoHideTimeout: function clearAutoHideTimeout() {
      if (this.timeout) {
        clearTimeout(this.timeout);
        this.timeout = null;
      }
    },
    startToShow: function startToShow() {
      var this$1 = this;

      this.$nextTick(function () {
        window.getComputedStyle(this$1.$refs.outer).opacity; // 解决 vue 不触发 transitionend 的问题，是不是 dom 画上去的时候就已经有 fadein 样式类了？
        var tid = setTimeout(function () {
          clearTimeout(tid);
          tid = null;
          this$1.visible = true;
        }, 1);
      });
    },
  },
};

/* script */
var __vue_script__ = script;

/* template */
var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.dataShow)?_c('div',{ref:"outer",class:_vm.classes.outer,on:{"transitionend":_vm.handleTransitionEnd}},[_c('div',{class:_vm.classes.arrow,style:('left: ' + _vm.arrowPosition + '%;')}),_vm._v(" "),_c('div',{class:_vm.classes.wrap},[_c('div',{class:_vm.classes.text},[_vm._t("default")],2),_vm._v(" "),_c('span',{class:_vm.classes.close,on:{"click":_vm.handleClose}})])]):_vm._e()};
var __vue_staticRenderFns__ = [];

  /* style */
  var __vue_inject_styles__ = undefined;
  /* scoped */
  var __vue_scope_id__ = undefined;
  /* module identifier */
  var __vue_module_identifier__ = undefined;
  /* functional template */
  var __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var index = __vue_normalize__(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    undefined,
    undefined
  );

export default index;
