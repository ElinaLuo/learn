import filesize from "rollup-plugin-filesize";
import resolve from "rollup-plugin-node-resolve";
import { uglify } from "rollup-plugin-uglify";
import replace from "rollup-plugin-replace";
import path from "path";
import babel from "rollup-plugin-babel";

const pkg = require(path.resolve(process.cwd(), "./package.json"));

const external = Object.keys(pkg.dependencies || {}).concat(
  Object.keys(pkg.peerDependencies || {})
);

function externalFilter(ID) {
  for (let i = 0; i < external.length; i++) {
    const pkgName = external[i];
    if (ID.indexOf(pkgName) === 0) return true;
  }

  return false;
}
function getEnvVariables(production) {
  return {
    "process.env.NODE_ENV": production ? "'production'" : "'development'"
  };
}

function getVersion() {
  return {
    __VERSION__: require("./package").version
  };
}

export default ["response","response-320","response-375"].map(file => ({
  input: `./src/styled-components/${file}.mjs`,
  output: {
    file: `./dist/${file}.js`,
    format: "cjs"
  },
  external: externalFilter,
  plugins: [
    babel({
      exclude: "node_modules/**"
    }),
    resolve(),
    replace(getVersion()),
    replace(getEnvVariables(true)),
    uglify(),
    filesize()
  ]
}));
