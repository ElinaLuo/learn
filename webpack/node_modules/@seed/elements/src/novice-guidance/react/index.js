import React, { Component } from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';

import '../style/index.less';
import { prefixCls, NOOP } from '@seed/ui-base';

export default class NoviceGuidance extends Component {
  static propTypes = {
    type: PropTypes.oneOf(['circle', 'rectangle']),
    show: PropTypes.bool,
    autoHideTimeout: PropTypes.number,
    children: PropTypes.node,
    onHide: PropTypes.func,
    onShow: PropTypes.func,
    arrowPosition: PropTypes.number,
    flipArrow: PropTypes.bool,
  };

  static defaultProps = {
    type: 'rectangle',
    show: false,
    autoHideTimeout: 5000,
    onHide: NOOP,
    onShow: NOOP,
    arrowPosition: 50,
    flipArrow: false,
  };

  constructor(props) {
    super(props);
    this.state = {
      show: props.show,
      visible: false,
    };
  }

  componentDidMount() {
    const { autoHideTimeout, show } = this.props;
    if (show && autoHideTimeout) {
      this.setAutoHide();
    }
    if (show) {
      let tid = setTimeout(() => {
        this.setState({ visible: true });
        clearTimeout(tid);
        tid = null;
      }, 0);
    }
  }

  setAutoHide() {
    const { autoHideTimeout, onHide } = this.props;
    this.timeout = setTimeout(() => {
      this.setState({ show: false });
      onHide();
      this.clearAutoHideTimeout();
    }, autoHideTimeout);
  }

  clearAutoHideTimeout() {
    if (this.timeout) {
      clearTimeout(this.timeout);
      this.timeout = null;
    }
  }

  componentWillUnmount() {
    this.clearAutoHideTimeout();
  }

  componentWillReceiveProps(newProps) {
    if (newProps.show === this.props.show) {
      return;
    }
    if (newProps.show) {
      this.setState({ show: newProps.show }, () => {
        let tid = setTimeout(() => {
          this.setState({
            visible: true,
          });
          clearTimeout(tid);
          tid = null;
        }, 0);
      });
    } else {
      this.setState({
        visible: false,
      });
    }
  }

  handleClose = () => {
    this.setState({ visible: false });
  };

  handleTransitionEnd = () => {
    const { show, onHide, onShow, autoHideTimeout } = this.props;
    if (show) {
      onShow();
      if (autoHideTimeout) {
        this.setAutoHide();
      }
    } else {
      this.setState({ show: false }, onHide);
    }
  };

  render() {
    const { children, type, arrowPosition, flipArrow } = this.props;
    const { show, visible } = this.state;
    const outerClassName = cls(
      prefixCls('novice-guidance'),
      prefixCls('novice-guidance', type),
      {
        [prefixCls('novice-guidance', 'fadein')]: visible,
      },
    );
    const textClassName = prefixCls('novice-guidance', 'text');
    const arrowClassName = cls(prefixCls('novice-guidance', 'arrow'), {
      [prefixCls('novice-guidance', 'arrow', 'flipped')]: flipArrow,
    });

    if (!show) {
      return null;
    }

    return (
      <div
        className={outerClassName}
        onTransitionEnd={this.handleTransitionEnd}
      >
        <div className={arrowClassName} style={{ left: arrowPosition + '%' }} />
        <div className={prefixCls('novice-guidance', 'wrap')}>
          <div className={textClassName}>{children}</div>
          <span
            className={prefixCls('novice-guidance', 'close')}
            onClick={this.handleClose}
          />
        </div>
      </div>
    );
  }
}
