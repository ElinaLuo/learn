import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import React, { Component } from 'react';
import { NOOP } from '@seed/ui-base';
import PropTypes from 'prop-types';
import getColorStops from '@dp/util-color';
import "../style/slider.css";
import { mixin } from '../common/mixin.js';

var Slider =
/*#__PURE__*/
function (_Component) {
  _inherits(Slider, _Component);

  function Slider(props) {
    var _this;

    _classCallCheck(this, Slider);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Slider).call(this, props));

    _this.setProgressRef = function (el) {
      _this.progressEl = el;
    };

    _this.setHandlerRef = function (el) {
      _this.handlerEl = el;
    };

    _this.handleMarkClick = function (index) {
      return function () {
        _this.props.onChange(index);
      };
    };

    mixin(_assertThisInitialized(_this));
    _this.state = {
      handlerX: 0
    };
    return _this;
  }

  _createClass(Slider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.whenMount();
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.whenUpdateProps(nextProps.marks, nextProps.value);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.whenUnmount();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var classes = this.classes,
          props = this.props,
          state = this.state,
          handlerWidth = this.handlerWidth;
      var marks = props.marks;
      var handlerX = state.handlerX;
      var markLength = marks.length;
      var colorStops = getColorStops('#ffb76c', '#f63', markLength);
      var currentValue = this.getCurrentValue();
      return React.createElement("div", {
        className: classes.slider
      }, React.createElement("div", {
        className: classes.progress,
        ref: this.setProgressRef
      }, React.createElement("div", {
        className: classes.progressInactive,
        style: {
          left: handlerX + 'px'
        }
      })), React.createElement("div", {
        className: classes.marks
      }, _mapInstanceProperty(marks).call(marks, function (_ref, index) {
        var label = _ref.label;
        return React.createElement("div", {
          className: classes.markItem,
          key: index,
          onClick: _this2.handleMarkClick(index),
          style: {
            left: index / (markLength - 1) * 100 + '%'
          }
        }, React.createElement("div", {
          className: classes.markPoint,
          style: {
            backgroundColor: index <= currentValue ? colorStops[index] : ''
          }
        }), React.createElement("div", {
          className: classes.markText,
          style: {
            color: index <= currentValue ? '#f63' : ''
          }
        }, label));
      })), React.createElement("div", {
        ref: this.setHandlerRef,
        className: classes.handler,
        onTouchStart: this.handleTouchStart,
        onTouchMove: this.handleTouchMove,
        onTouchEnd: this.handleTouchEnd,
        style: {
          left: handlerX + handlerWidth / 2 + 'px'
        }
      }, React.createElement("div", {
        className: classes.handlerBar
      })));
    }
  }]);

  return Slider;
}(Component);

Slider.propTypes = {
  value: PropTypes.number,
  marks: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string.isRequired
  }).isRequired).isRequired,
  onChange: PropTypes.func
};
Slider.defaultProps = {
  value: 0,
  onChange: NOOP
};
export { Slider as default };