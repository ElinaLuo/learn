import _typeof from "@babel/runtime-corejs3/helpers/typeof";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import "../style/index.css";
import { prefixCls } from '@seed/ui-base';

var noop = function noop() {};

var preZero = function preZero(no) {
  return no < 10 ? "0".concat(no) : no;
};

var getMD = function getMD(dateTime) {
  return dateTime.getMonth() + 1 + '月' + dateTime.getDate() + '日';
};

var getYMD = function getYMD(dateTime) {
  var _context;

  return _concatInstanceProperty(_context = "".concat(dateTime.getFullYear(), "\u5E74")).call(_context, getMD(dateTime));
};

var getHM = function getHM(dateTime) {
  var _context2;

  return _concatInstanceProperty(_context2 = "".concat(preZero(dateTime.getMinutes()), ":")).call(_context2, preZero(dateTime.getSeconds()));
};

var DateTime =
/*#__PURE__*/
function (_Component) {
  _inherits(DateTime, _Component);

  function DateTime() {
    _classCallCheck(this, DateTime);

    return _possibleConstructorReturn(this, _getPrototypeOf(DateTime).apply(this, arguments));
  }

  _createClass(DateTime, [{
    key: "renderDateTime",
    value: function renderDateTime() {
      var _context3;

      var _this$props = this.props,
          value = _this$props.value,
          format = _this$props.format;
      var dateTime;

      if (!format && value) {
        // 没有格式化并且传入了值，返回距离当前时间多久
        var current = new Date();
        var newDate = _typeof(value) === 'object' ? value : new Date(value);
        var timeDiff = current - newDate; // console.log(timeDiff);

        if (timeDiff >= 0) {
          // 过去时间
          if (0 <= timeDiff && timeDiff < 1000 * 60) {
            // 一分钟内
            return '刚刚';
          } else if (1000 * 60 <= timeDiff && timeDiff < 1000 * 60 * 60) {
            // 一小时内
            return Math.floor(timeDiff / (1000 * 60)) + '分钟前';
          } else if (1000 * 60 * 60 <= timeDiff && timeDiff < 1000 * 60 * 60 * 24) {
            // 一天内
            return Math.floor(timeDiff / (1000 * 60 * 60)) + '小时前';
          } else if (1000 * 60 * 60 * 24 <= timeDiff && timeDiff < 1000 * 60 * 60 * 24 * 365) {
            // 一年内
            return getMD(newDate);
          } else {
            return getYMD(newDate);
          }
        } else {
          if (typeof timeDiff === 'number') {// 传入的时间超过当前时间，返回默认格式
          }
        }
      }

      switch (_typeof(value)) {
        case 'number':
        case 'string':
          // value 数字时间戳
          dateTime = new Date(value); //TODO 增加非法判断

          break;

        case 'undefined':
          // value 不传
          dateTime = new Date();

        case 'object':
          // value 是一个日期对象
          dateTime = value;

        default:
          throw Error('DateTime传入value值无效');
      }

      switch (format) {
        case 'hm':
          return getHM(dateTime);

        case 'md':
          return getMD(dateTime);

        case 'ymd':
          return getYMD(dateTime);

        case 'ymdhm':
        default:
          return _concatInstanceProperty(_context3 = "".concat(getYMD(dateTime), " ")).call(_context3, getHM(dateTime));
      }
    }
  }, {
    key: "render",
    value: function render() {
      var style = this.props.style; // 普通按钮

      return React.createElement("span", {
        style: style,
        className: prefixCls('datetime')
      }, this.renderDateTime());
    }
  }]);

  return DateTime;
}(Component);

export { DateTime as default };
DateTime.propTypes = {
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),
  format: PropTypes.string
};
DateTime.defaultProps = {};