"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/inherits"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

require("../style/index.css");

var _uiBase = require("@seed/ui-base");

var noop = function noop() {};

var preZero = function preZero(no) {
  return no < 10 ? "0".concat(no) : no;
};

var getMD = function getMD(dateTime) {
  return dateTime.getMonth() + 1 + '月' + dateTime.getDate() + '日';
};

var getYMD = function getYMD(dateTime) {
  var _context;

  return (0, _concat.default)(_context = "".concat(dateTime.getFullYear(), "\u5E74")).call(_context, getMD(dateTime));
};

var getHM = function getHM(dateTime) {
  var _context2;

  return (0, _concat.default)(_context2 = "".concat(preZero(dateTime.getMinutes()), ":")).call(_context2, preZero(dateTime.getSeconds()));
};

var DateTime =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(DateTime, _Component);

  function DateTime() {
    (0, _classCallCheck2.default)(this, DateTime);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DateTime).apply(this, arguments));
  }

  (0, _createClass2.default)(DateTime, [{
    key: "renderDateTime",
    value: function renderDateTime() {
      var _context3;

      var _this$props = this.props,
          value = _this$props.value,
          format = _this$props.format;
      var dateTime;

      if (!format && value) {
        // 没有格式化并且传入了值，返回距离当前时间多久
        var current = new Date();
        var newDate = (0, _typeof2.default)(value) === 'object' ? value : new Date(value);
        var timeDiff = current - newDate; // console.log(timeDiff);

        if (timeDiff >= 0) {
          // 过去时间
          if (0 <= timeDiff && timeDiff < 1000 * 60) {
            // 一分钟内
            return '刚刚';
          } else if (1000 * 60 <= timeDiff && timeDiff < 1000 * 60 * 60) {
            // 一小时内
            return Math.floor(timeDiff / (1000 * 60)) + '分钟前';
          } else if (1000 * 60 * 60 <= timeDiff && timeDiff < 1000 * 60 * 60 * 24) {
            // 一天内
            return Math.floor(timeDiff / (1000 * 60 * 60)) + '小时前';
          } else if (1000 * 60 * 60 * 24 <= timeDiff && timeDiff < 1000 * 60 * 60 * 24 * 365) {
            // 一年内
            return getMD(newDate);
          } else {
            return getYMD(newDate);
          }
        } else {
          if (typeof timeDiff === 'number') {// 传入的时间超过当前时间，返回默认格式
          }
        }
      }

      switch ((0, _typeof2.default)(value)) {
        case 'number':
        case 'string':
          // value 数字时间戳
          dateTime = new Date(value); //TODO 增加非法判断

          break;

        case 'undefined':
          // value 不传
          dateTime = new Date();

        case 'object':
          // value 是一个日期对象
          dateTime = value;

        default:
          throw Error('DateTime传入value值无效');
      }

      switch (format) {
        case 'hm':
          return getHM(dateTime);

        case 'md':
          return getMD(dateTime);

        case 'ymd':
          return getYMD(dateTime);

        case 'ymdhm':
        default:
          return (0, _concat.default)(_context3 = "".concat(getYMD(dateTime), " ")).call(_context3, getHM(dateTime));
      }
    }
  }, {
    key: "render",
    value: function render() {
      var style = this.props.style; // 普通按钮

      return _react.default.createElement("span", {
        style: style,
        className: (0, _uiBase.prefixCls)('datetime')
      }, this.renderDateTime());
    }
  }]);
  return DateTime;
}(_react.Component);

exports.default = DateTime;
DateTime.propTypes = {
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.object]),
  format: _propTypes.default.string
};
DateTime.defaultProps = {};