import React, { Component } from 'react';
import { NOOP } from '@seed/ui-base';
import PropTypes from 'prop-types';
import getColorStops from '@dp/util-color';

import '../style/slider.less';
import { mixin } from '../common/mixin.js';

export default class Slider extends Component {
  static propTypes = {
    value: PropTypes.number,
    marks: PropTypes.arrayOf(
      PropTypes.shape({
        label: PropTypes.string.isRequired,
      }).isRequired,
    ).isRequired,
    onChange: PropTypes.func,
  };

  static defaultProps = {
    value: 0,
    onChange: NOOP,
  };

  constructor(props) {
    super(props);
    mixin(this);
    this.state = { handlerX: 0 };
  }

  setProgressRef = (el) => {
    this.progressEl = el;
  };

  setHandlerRef = (el) => {
    this.handlerEl = el;
  };

  componentDidMount() {
    this.whenMount();
  }

  componentWillReceiveProps(nextProps) {
    this.whenUpdateProps(nextProps.marks, nextProps.value);
  }

  componentWillUnmount() {
    this.whenUnmount();
  }

  handleMarkClick = (index) => {
    return () => {
      this.props.onChange(index);
    };
  };

  render() {
    const { classes, props, state, handlerWidth } = this;
    const { marks } = props;
    const { handlerX } = state;
    const markLength = marks.length;
    const colorStops = getColorStops('#ffb76c', '#f63', markLength);
    const currentValue = this.getCurrentValue();

    return (
      <div className={classes.slider}>
        <div className={classes.progress} ref={this.setProgressRef}>
          <div
            className={classes.progressInactive}
            style={{ left: handlerX + 'px' }}
          />
        </div>
        <div className={classes.marks}>
          {marks.map(({ label }, index) => {
            return (
              <div
                className={classes.markItem}
                key={index}
                onClick={this.handleMarkClick(index)}
                style={{ left: (index / (markLength - 1)) * 100 + '%' }}
              >
                <div
                  className={classes.markPoint}
                  style={{
                    backgroundColor:
                      index <= currentValue ? colorStops[index] : '',
                  }}
                />
                <div
                  className={classes.markText}
                  style={{ color: index <= currentValue ? '#f63' : '' }}
                >
                  {label}
                </div>
              </div>
            );
          })}
        </div>
        <div
          ref={this.setHandlerRef}
          className={classes.handler}
          onTouchStart={this.handleTouchStart}
          onTouchMove={this.handleTouchMove}
          onTouchEnd={this.handleTouchEnd}
          style={{ left: handlerX + handlerWidth / 2 + 'px' }}
        >
          <div className={classes.handlerBar} />
        </div>
      </div>
    );
  }
}
