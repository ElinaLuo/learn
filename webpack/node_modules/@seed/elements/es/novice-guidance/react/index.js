import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import React, { Component } from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import "../style/index.css";
import { prefixCls, NOOP } from '@seed/ui-base';

var NoviceGuidance =
/*#__PURE__*/
function (_Component) {
  _inherits(NoviceGuidance, _Component);

  function NoviceGuidance(props) {
    var _this;

    _classCallCheck(this, NoviceGuidance);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(NoviceGuidance).call(this, props));

    _this.handleClose = function () {
      _this.setState({
        visible: false
      });
    };

    _this.handleTransitionEnd = function () {
      var _this$props = _this.props,
          show = _this$props.show,
          onHide = _this$props.onHide,
          onShow = _this$props.onShow,
          autoHideTimeout = _this$props.autoHideTimeout;

      if (show) {
        onShow();

        if (autoHideTimeout) {
          _this.setAutoHide();
        }
      } else {
        _this.setState({
          show: false
        }, onHide);
      }
    };

    _this.state = {
      show: props.show,
      visible: false
    };
    return _this;
  }

  _createClass(NoviceGuidance, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props2 = this.props,
          autoHideTimeout = _this$props2.autoHideTimeout,
          show = _this$props2.show;

      if (show && autoHideTimeout) {
        this.setAutoHide();
      }

      if (show) {
        var tid = _setTimeout(function () {
          _this2.setState({
            visible: true
          });

          clearTimeout(tid);
          tid = null;
        }, 0);
      }
    }
  }, {
    key: "setAutoHide",
    value: function setAutoHide() {
      var _this3 = this;

      var _this$props3 = this.props,
          autoHideTimeout = _this$props3.autoHideTimeout,
          onHide = _this$props3.onHide;
      this.timeout = _setTimeout(function () {
        _this3.setState({
          show: false
        });

        onHide();

        _this3.clearAutoHideTimeout();
      }, autoHideTimeout);
    }
  }, {
    key: "clearAutoHideTimeout",
    value: function clearAutoHideTimeout() {
      if (this.timeout) {
        clearTimeout(this.timeout);
        this.timeout = null;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearAutoHideTimeout();
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(newProps) {
      var _this4 = this;

      if (newProps.show === this.props.show) {
        return;
      }

      if (newProps.show) {
        this.setState({
          show: newProps.show
        }, function () {
          var tid = _setTimeout(function () {
            _this4.setState({
              visible: true
            });

            clearTimeout(tid);
            tid = null;
          }, 0);
        });
      } else {
        this.setState({
          visible: false
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          children = _this$props4.children,
          type = _this$props4.type,
          arrowPosition = _this$props4.arrowPosition,
          flipArrow = _this$props4.flipArrow;
      var _this$state = this.state,
          show = _this$state.show,
          visible = _this$state.visible;
      var outerClassName = cls(prefixCls('novice-guidance'), prefixCls('novice-guidance', type), _defineProperty({}, prefixCls('novice-guidance', 'fadein'), visible));
      var textClassName = prefixCls('novice-guidance', 'text');
      var arrowClassName = cls(prefixCls('novice-guidance', 'arrow'), _defineProperty({}, prefixCls('novice-guidance', 'arrow', 'flipped'), flipArrow));

      if (!show) {
        return null;
      }

      return React.createElement("div", {
        className: outerClassName,
        onTransitionEnd: this.handleTransitionEnd
      }, React.createElement("div", {
        className: arrowClassName,
        style: {
          left: arrowPosition + '%'
        }
      }), React.createElement("div", {
        className: prefixCls('novice-guidance', 'wrap')
      }, React.createElement("div", {
        className: textClassName
      }, children), React.createElement("span", {
        className: prefixCls('novice-guidance', 'close'),
        onClick: this.handleClose
      })));
    }
  }]);

  return NoviceGuidance;
}(Component);

NoviceGuidance.propTypes = {
  type: PropTypes.oneOf(['circle', 'rectangle']),
  show: PropTypes.bool,
  autoHideTimeout: PropTypes.number,
  children: PropTypes.node,
  onHide: PropTypes.func,
  onShow: PropTypes.func,
  arrowPosition: PropTypes.number,
  flipArrow: PropTypes.bool
};
NoviceGuidance.defaultProps = {
  type: 'rectangle',
  show: false,
  autoHideTimeout: 5000,
  onHide: NOOP,
  onShow: NOOP,
  arrowPosition: 50,
  flipArrow: false
};
export { NoviceGuidance as default };