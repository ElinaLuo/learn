import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";

/* eslint-disable react/jsx-indent */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import ScrollNum from './srcoll-num';
import numberCeil from './number-ceil';
import { prefixCls } from '@seed/ui-base';
import "../style/index.css";

var AnimatedInteraction =
/*#__PURE__*/
function (_Component) {
  _inherits(AnimatedInteraction, _Component);

  function AnimatedInteraction(options) {
    var _this;

    _classCallCheck(this, AnimatedInteraction);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedInteraction).call(this, options));
    _this.animate = false;
    return _this;
  }

  _createClass(AnimatedInteraction, [{
    key: "componentWillUpdate",
    value: function componentWillUpdate(nextProps) {
      if (nextProps.active && nextProps.active != this.active) {
        this.animate = true;
      } else {
        this.animate = false;
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      var props = this.props;
      return props.count != nextProps.count || props.active != nextProps.active || props.iconType != nextProps.iconType || props.theme != nextProps.theme;
    }
  }, {
    key: "getDefaultText",
    value: function getDefaultText(iconType) {
      var text;

      switch (iconType) {
        case 'input-like':
          text = '赞';
          break;

        case 'input-collect':
          text = '收藏';
          break;
      }

      if (text) {
        return React.createElement("div", {
          className: prefixCls('def-text')
        }, text);
      }

      return null;
    }
  }, {
    key: "render",
    value: function render() {
      var _context, _context2, _context3;

      var _this$props = this.props,
          active = _this$props.active,
          iconType = _this$props.iconType,
          count = _this$props.count,
          theme = _this$props.theme;
      this.active = active;
      var animate = this.animate;
      return React.createElement("div", {
        className: _concatInstanceProperty(_context = _concatInstanceProperty(_context2 = "".concat(prefixCls('ani-box'), " ")).call(_context2, prefixCls(iconType), " ")).call(_context, active ? prefixCls('active') : '')
      }, React.createElement("i", {
        className: _concatInstanceProperty(_context3 = "".concat(prefixCls(iconType + '-icon' + '-' + theme), " ")).call(_context3, animate ? prefixCls('animate ') : '')
      }), React.createElement("i", {
        className: animate ? prefixCls('icon-dot') + ' ' + prefixCls('animate') : prefixCls('icon-dot')
      }), count < 10000 ? count > 0 ? React.createElement("div", {
        className: prefixCls('num-box')
      }, React.createElement(ScrollNum, {
        count: count,
        active: active
      })) : this.getDefaultText(iconType) : React.createElement("div", {
        className: prefixCls('max-num')
      }, numberCeil(count)));
    }
  }]);

  return AnimatedInteraction;
}(Component);

export { AnimatedInteraction as default };
AnimatedInteraction.propTypes = {
  active: PropTypes.bool,
  iconType: PropTypes.string.isRequired,
  count: PropTypes.number.isRequired,
  theme: PropTypes.string
};
AnimatedInteraction.defaultProps = {
  active: false,
  theme: 'dp'
};