import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { prefixCls } from '@seed/ui-base';
import '../style/srcoll-num.less';

export default class ScrollNum extends Component {
  constructor(options) {
    super(options);
    this.numArr = [9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
    this.lastNum = 0;
    this.state = { nums: this.getNumChange(this.props.count).lastNums };
  }

  getNums(num) {
    let currentNums = num
      .toString()
      .split('')
      .map((n) => {
        return {
          val: Number(n),
        };
      });
    return currentNums;
  }

  // props发生改变
  componentWillReceiveProps(newProps) {
    let { count } = newProps;

    let { currentNums, lastNums } = this.getNumChange(count);
    this.timeOutHandle = setTimeout(() => {
      this.setState({ nums: currentNums });
    }, 300);
    this.setState({ nums: lastNums });
  }

  componentWillUnmount() {
    clearTimeout(this.timeOutHandle);
  }

  getNumChange(count) {
    if (!this.lastNum) this.lastNum = count;
    let currentNums = this.getNums(count);
    let lastNums = this.getNums(this.lastNum);
    // 位数没有变化
    if (currentNums.length == lastNums.length) {
      // 数字变大
      if (count > this.lastNum) {
        lastNums.forEach((num, index) => {
          if (currentNums[index].val !== lastNums[index].val) {
            num.inc = true;
          }
        });
      } else if (count < this.lastNum) {
        lastNums.forEach((num, index) => {
          if (currentNums[index].val !== lastNums[index].val) {
            num.dec = true;
          }
        });
      }
    } else if (count > this.lastNum) {
      // 全部数字增加
      lastNums.forEach((n) => {
        n.inc = true;
      });
    } else {
      // 全部数字减小
      lastNums.forEach((n) => {
        n.dec = true;
      });
    }
    this.lastNum = count;
    return { lastNums, currentNums };
  }

  getNumCSS(num, active) {
    let cssName = 'seed-num ';
    if (num.inc) cssName += 'seed-increase ';
    if (num.dec) cssName += 'seed-decrease ';
    if (active) cssName += 'seed-active ';
    return cssName;
  }

  render() {
    const { active } = this.props;
    const { nums } = this.state;
    return (
      <div className="seed-num-wrap">
        {nums.map((num, index) => {
          return (
            <div className={this.getNumCSS(num, active)} key={index}>
              <div className={prefixCls('dec')}>{this.numArr[num.val]}</div>
              <div className={prefixCls('me')}>{this.numArr[num.val + 1]}</div>
              <div className={prefixCls('inc')}>{this.numArr[num.val + 2]}</div>
            </div>
          );
        })}
      </div>
    );
  }
}

ScrollNum.propTypes = {
  active: PropTypes.bool.isRequired,
  count: PropTypes.number.isRequired,
};
