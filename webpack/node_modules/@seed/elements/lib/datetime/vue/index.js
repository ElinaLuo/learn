'use strict';

var uiBase = require('@seed/ui-base');
var normalizeComponent = require('../../normalize-component-136d5168.js');
require('../style/index.css');

//
var preZero = function (no) {
  return no < 10 ? ("0" + no) : no;
};

var getMD = function (dateTime) {
  return dateTime.getMonth() + 1 + '月' + dateTime.getDate() + '日';
};
var getYMD = function (dateTime) {
  return ((dateTime.getFullYear()) + "年" + (getMD(dateTime)));
};

var getHM = function (dateTime) {
  return ((preZero(dateTime.getMinutes())) + ":" + (preZero(dateTime.getSeconds())));
};
var script = {
  name: 'datetime',
  props: {
    format: {
      type: String,
    },
    styles: {
      type: Object,
    },
    value: {
      type: [String, Number, Object],
    },
  },
  computed: {
    datetimeClass: function datetimeClass() {
      return [uiBase.prefixCls('datetime')];
    },
    renderDateTime: function renderDateTime() {
      var ref = this;
      var value = ref.value;
      var format = ref.format;
      var dateTime;
      if (!format && value) {
        // 没有格式化并且传入了值，返回距离当前时间多久
        var current = new Date();
        var newDate = typeof value === 'object' ? value : new Date(value);
        var timeDiff = current - newDate;
        // console.log(timeDiff);
        if (timeDiff >= 0) {
          // 过去时间
          if (0 <= timeDiff && timeDiff < 1000 * 60) {
            // 一分钟内
            return '刚刚';
          } else if (1000 * 60 <= timeDiff && timeDiff < 1000 * 60 * 60) {
            // 一小时内
            return Math.floor(timeDiff / (1000 * 60)) + '分钟前';
          } else if (
            1000 * 60 * 60 <= timeDiff &&
            timeDiff < 1000 * 60 * 60 * 24
          ) {
            // 一天内
            return Math.floor(timeDiff / (1000 * 60 * 60)) + '小时前';
          } else if (
            1000 * 60 * 60 * 24 <= timeDiff &&
            timeDiff < 1000 * 60 * 60 * 24 * 365
          ) {
            // 一年内
            return getMD(newDate);
          } else {
            return getYMD(newDate);
          }
        }
      }
      switch (typeof value) {
        case 'number':
        case 'string':
          // value 数字时间戳
          dateTime = new Date(value);
          break;
        case 'undefined':
          // value 不传
          dateTime = new Date();
        case 'object':
          // value 是一个日期对象
          dateTime = value;
        default:
          throw Error('DateTime传入value值无效');
      }
      switch (format) {
        case 'hm':
          return getHM(dateTime);
        case 'md':
          return getMD(dateTime);
        case 'ymd':
          return getYMD(dateTime);
        case 'ymdhm':
        default:
          return ((getYMD(dateTime)) + " " + (getHM(dateTime)));
      }
    },
  },
  methods: {
    // handleClick(e){
    //     this.$emit('click', e, this);
    // }
  },
};

/* script */
var __vue_script__ = script;

/* template */
var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{class:_vm.datetimeClass,style:(_vm.styles)},[_vm._v("\n  "+_vm._s(_vm.renderDateTime)+"\n")])};
var __vue_staticRenderFns__ = [];

  /* style */
  var __vue_inject_styles__ = undefined;
  /* scoped */
  var __vue_scope_id__ = undefined;
  /* module identifier */
  var __vue_module_identifier__ = undefined;
  /* functional template */
  var __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var index = normalizeComponent.__vue_normalize__(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    undefined,
    undefined
  );

module.exports = index;
