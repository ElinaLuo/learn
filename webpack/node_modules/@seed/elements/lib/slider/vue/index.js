'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var uiBase = require('@seed/ui-base');
var normalizeComponent = require('../../normalize-component-136d5168.js');
require('../style/slider.css');
var const_js = require('@seed/ui-base/es/const.js');
var getColorStops = _interopDefault(require('@dp/util-color'));

/**
 * @since 2018-12-25 22:22
 * @author vivaxy
 */

var getHandlerXByValue = function(progressWidth, marks, value) {
  return (progressWidth / (marks.length - 1)) * value;
};

var mixin = function(ins) {
  ins.classes = {
    slider: uiBase.prefixCls('slider'),
    container: uiBase.prefixCls('slider', 'container'),
    progress: uiBase.prefixCls('slider', 'progress'),
    progressInactive: uiBase.prefixCls('slider', 'progress-inactive'),
    marks: uiBase.prefixCls('slider', 'marks'),
    markItem: uiBase.prefixCls('slider', 'mark-item'),
    markPoint: uiBase.prefixCls('slider', 'mark-point'),
    markText: uiBase.prefixCls('slider', 'mark-text'),
    handler: uiBase.prefixCls('slider', 'handler'),
    handlerBar: uiBase.prefixCls('slider', 'handler-bar'),
  };

  // touch life circle
  ins.handlerStartClientX = null;
  ins.handlerStartX = null;

  // component life circle
  ins.progressEl = null;
  ins.handlerEl = null;
  ins.handlerWidth = null;
  ins.progressWidth = null;

  ins.getWidth = function() {
    var handlerEl = ins.isReactComponent
      ? ins.handlerEl
      : ins.$refs.handlerEl;
    var progressEl = ins.isReactComponent
      ? ins.progressEl
      : ins.$refs.progressEl;
    var ref = handlerEl.getBoundingClientRect();
    var handlerWidth = ref.width;
    var ref$1 = progressEl.getBoundingClientRect();
    var progressWidth = ref$1.width;
    ins.handlerWidth = handlerWidth;
    ins.progressWidth = progressWidth;
  };

  ins.updateHandlerX = function(handlerX) {
    if (ins.isReactComponent) {
      ins.setState({ handlerX: handlerX });
    } else {
      ins.handlerX = handlerX;
    }
  };

  ins.emitChange = function(value) {
    if (ins.isReactComponent) {
      ins.props.onChange(value);
    } else {
      ins.$emit('change', value);
    }
  };

  ins.whenMount = function() {
    ins.getWidth();
    window.addEventListener('resize', ins.whenResize);
    var marks = ins.isReactComponent ? ins.props.marks : ins.marks;
    var value = ins.isReactComponent ? ins.props.value : ins.value;
    var handlerX = getHandlerXByValue(ins.progressWidth, marks, value);
    ins.updateHandlerX(handlerX);
  };

  ins.whenUpdateProps = function(marks, value) {
    var handlerX = getHandlerXByValue(ins.progressWidth, marks, value);
    ins.updateHandlerX(handlerX);
  };

  ins.whenResize = function() {
    ins.getWidth();
    var marks = ins.isReactComponent ? ins.props.marks : ins.marks;
    var value = ins.isReactComponent ? ins.props.value : ins.value;
    ins.whenUpdateProps(marks, value);
  };

  ins.whenUnmount = function() {
    ins.handlerWidth = null;
    ins.progressWidth = null;
    window.removeEventListener('resize', ins.whenResize);
  };

  ins.handleTouchStart = function(e) {
    ins.handlerStartClientX = e.changedTouches[0].clientX;
    ins.handlerStartX = ins.isReactComponent
      ? ins.state.handlerX
      : ins.handlerX;
  };

  ins.handleTouchMove = function (e) {
    if (e.changedTouches.length !== 1) {
      return; // not standard touch move
    }

    var newHandlerX =
      e.changedTouches[0].clientX - ins.handlerStartClientX + ins.handlerStartX;
    if (newHandlerX < 0) {
      newHandlerX = 0;
    }
    if (newHandlerX > ins.progressWidth) {
      newHandlerX = ins.progressWidth;
    }

    ins.updateHandlerX(newHandlerX);
  };

  ins.getCurrentValue = function() {
    var marks = ins.isReactComponent ? ins.props.marks : ins.marks;
    var handlerX = ins.isReactComponent ? ins.state.handlerX : ins.handlerX;
    var eachMarkWidth = ins.progressWidth / (marks.length - 1);
    return Math.floor(handlerX / eachMarkWidth);
  };

  ins.getSiblingValue = function() {
    var marks = ins.isReactComponent ? ins.props.marks : ins.marks;
    var handlerX = ins.isReactComponent ? ins.state.handlerX : ins.handlerX;
    var eachMarkWidth = ins.progressWidth / (marks.length - 1);
    var currentValue = Math.floor(handlerX / eachMarkWidth);
    var remaining = handlerX % eachMarkWidth;
    if (remaining > eachMarkWidth / 2) {
      // to right
      return currentValue + 1;
    }
    return currentValue;
  };

  ins.handleTouchEnd = function (e) {
    if (e.changedTouches.length !== 1) {
      return;
    }

    ins.handlerStartClientX = null;
    ins.handlerStartX = null;

    var progressWidth = ins.progressWidth;
    var handlerX = ins.isReactComponent ? ins.state.handlerX : ins.handlerX;
    var marks = ins.isReactComponent ? ins.props.marks : ins.marks;

    var siblingValue = ins.getSiblingValue();
    var value = ins.isReactComponent ? ins.props.value : ins.value;
    if (siblingValue !== value) {
      ins.emitChange(siblingValue);
    } else {
      var newHandlerX = getHandlerXByValue(
        progressWidth,
        marks,
        siblingValue
      );
      if (handlerX !== newHandlerX) {
        ins.updateHandlerX(newHandlerX);
      }
    }
  };
};

//

var script = {
  name: 'slider',
  props: {
    value: {
      type: Number,
      default: 0,
    },
    marks: {
      type: Array,
      required: true,
    },
    onChange: {
      type: Function,
      default: const_js.NOOP,
    },
  },
  watch: {
    value: function value(val) {
      this.whenUpdateProps(this.marks, val);
    },
  },
  data: function data() {
    return {
      classes: this.classes,
      handlerX: 0,
    };
  },
  computed: {
    currentValue: function currentValue() {
      return this.getCurrentValue();
    },
    colorStops: function colorStops() {
      return getColorStops('#ffb76c', '#f63', this.marks.length);
    },
  },
  created: function created() {
    mixin(this);
  },
  mounted: function mounted() {
    this.whenMount();
  },
  beforeDestroy: function beforeDestroy() {
    this.whenUnmount();
  },
  methods: {
    handleMarkClick: function handleMarkClick(e) {
      this.$emit('change', Number(e.currentTarget.dataset.index));
    },
    handleTouchStart: function handleTouchStart(e) {
      this.handleTouchStart(e);
    },
    handleTouchMove: function handleTouchMove(e) {
      this.handleTouchMove(e);
    },
    handleTouchEnd: function handleTouchEnd(e) {
      this.handleTouchEnd(e);
    },
  },
};

/* script */
var __vue_script__ = script;

/* template */
var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:_vm.classes.slider},[_c('div',{ref:"progressEl",class:_vm.classes.progress},[_c('div',{class:_vm.classes.progressInactive,style:('left: ' + _vm.handlerX + 'px')})]),_vm._v(" "),_c('div',{class:_vm.classes.marks},_vm._l((_vm.marks),function(mark,index){return _c('div',{key:index,class:_vm.classes.markItem,style:('left: ' + (index / (_vm.marks.length - 1)) * 100 + '%'),attrs:{"data-index":index},on:{"click":_vm.handleMarkClick}},[_c('div',{class:_vm.classes.markPoint,style:('backgroundColor: ' +
            (index <= _vm.currentValue ? _vm.colorStops[index] : ''))}),_vm._v(" "),_c('div',{class:_vm.classes.markText,style:('color: ' + (index <= _vm.currentValue ? '#f63' : ''))},[_vm._v("\n        "+_vm._s(mark.label)+"\n      ")])])}),0),_vm._v(" "),_c('div',{ref:"handlerEl",class:_vm.classes.handler,style:('left: ' + (_vm.handlerX + _vm.handlerWidth / 2) + 'px'),on:{"touchstart":_vm.handleTouchStart,"touchmove":_vm.handleTouchMove,"touchend":_vm.handleTouchEnd}},[_c('div',{class:_vm.classes.handlerBar})])])};
var __vue_staticRenderFns__ = [];

  /* style */
  var __vue_inject_styles__ = undefined;
  /* scoped */
  var __vue_scope_id__ = undefined;
  /* module identifier */
  var __vue_module_identifier__ = undefined;
  /* functional template */
  var __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var index = normalizeComponent.__vue_normalize__(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    undefined,
    undefined
  );

module.exports = index;
