/**
 * @since 2018-11-30 13:55
 * @author vivaxy
 */

import React from 'react';
import PropTypes from 'prop-types';
import cls from 'classnames';

import serviceTextMap from '../common/service-text-map.js';
import * as services from '../common/services.js';
import * as types from '../common/types.js';
import toFixed from '../common/to-fixed.js';
import '../style/index.less';
import { prefixCls } from '@seed/ui-base';

function Service({ value }) {
  return (
    <div
      className={cls(
        prefixCls('tag'),
        prefixCls('tag', 'service'),
        prefixCls('tag', 'service', value),
      )}
    >
      {serviceTextMap[value]}
    </div>
  );
}

Service.propTypes = {
  value(props, propName, componentName) {
    if (!serviceTextMap.hasOwnProperty(props[propName])) {
      throw new Error(
        `Invalid prop \`${propName}\` of value \`${props[propName]}\` supplied to \`${componentName}\`, expected one of \`Tag.services\``,
      );
    }
  },
};

function RankingHorizontal({ value }) {
  return (
    <div
      className={cls(
        prefixCls('tag'),
        prefixCls('tag', 'ranking-horizontal'),
        prefixCls('tag', 'ranking', value < 4 ? 'red' : 'yellow'),
      )}
    >
      TOP {value}
    </div>
  );
}

RankingHorizontal.propTypes = {
  value(props, propName, componentName) {
    if (
      typeof props[propName] !== 'number' ||
      parseInt(props[propName]) !== props[propName] ||
      props[propName] < 1 ||
      props[propName] > 9
    ) {
      throw new Error(
        `Invalid prop \`${propName}\` of value \`${props[propName]}\` supplied to \`${componentName}\`, expected an integer from 1 to 9.`,
      );
    }
  },
};

function RankingVertical({ value }) {
  return (
    <div
      className={cls(
        prefixCls('tag'),
        prefixCls('tag', 'ranking-vertical'),
        prefixCls('tag', 'ranking', value < 4 ? 'red' : 'yellow'),
      )}
    >
      <div className={cls(prefixCls('tag', 'ranking-vertical-top'))}>TOP</div>
      <div className={cls(prefixCls('tag', 'ranking-vertical-ranking'))}>
        {toFixed(value, 2)}
      </div>
    </div>
  );
}

RankingVertical.propTypes = {
  value(props, propName, componentName) {
    if (
      typeof props[propName] !== 'number' ||
      parseInt(props[propName]) !== props[propName] ||
      props[propName] < 1 ||
      props[propName] > 99
    ) {
      throw new Error(
        `Invalid prop \`${propName}\` of value \`${props[propName]}\` supplied to \`${componentName}\`, expected an integer from 1 to 99.`,
      );
    }
  },
};

function ChainCertification() {
  return (
    <div
      className={cls(prefixCls('tag'), prefixCls('tag', 'chain-certification'))}
    >
      连锁认证
    </div>
  );
}

function BlackPearl() {
  return (
    <div className={cls(prefixCls('tag'), prefixCls('tag', 'black-pearl'))} />
  );
}

function MustEatList() {
  return (
    <div className={cls(prefixCls('tag'), prefixCls('tag', 'must-eat-list'))} />
  );
}

function MustLiveList() {
  return (
    <div
      className={cls(prefixCls('tag'), prefixCls('tag', 'must-live-list'))}
    />
  );
}

function MustStrollList() {
  return (
    <div
      className={cls(prefixCls('tag'), prefixCls('tag', 'must-stroll-list'))}
    />
  );
}

function MustPlayList() {
  return (
    <div
      className={cls(prefixCls('tag'), prefixCls('tag', 'must-play-list'))}
    />
  );
}

function MustGoList() {
  return (
    <div className={cls(prefixCls('tag'), prefixCls('tag', 'must-go-list'))} />
  );
}

function Primary({ size, children }) {
  return (
    <div
      className={cls(
        prefixCls('tag'),
        prefixCls('tag', 'primary'),
        prefixCls('tag', 'primary', size),
      )}
    >
      {children}
    </div>
  );
}

Primary.propTypes = {
  size: PropTypes.oneOf(['lg', 'md']),
  children: PropTypes.node.isRequired,
};

Primary.defaultProps = {
  size: 'md',
};

function Disabled({ size, children }) {
  return (
    <div
      className={cls(
        prefixCls('tag'),
        prefixCls('tag', 'disabled'),
        prefixCls('tag', 'disabled', size),
      )}
    >
      {children}
    </div>
  );
}

Disabled.propTypes = {
  size: PropTypes.oneOf(['lg', 'md']),
  children: PropTypes.node.isRequired,
};

Disabled.defaultProps = {
  size: 'md',
};

function Flat({ bordered, children }) {
  return (
    <div
      className={cls(prefixCls('tag'), prefixCls('tag', 'flat'), {
        [prefixCls('tag', 'flat', 'bordered')]: bordered,
      })}
    >
      {children}
    </div>
  );
}

Flat.propTypes = {
  bordered: PropTypes.bool,
  children: PropTypes.node.isRequired,
};

Flat.defaultProps = {
  bordered: false,
};

function Secondary({ children }) {
  return (
    <div className={cls(prefixCls('tag'), prefixCls('tag', 'secondary'))}>
      {children}
    </div>
  );
}

Secondary.propTypes = {
  children: PropTypes.node.isRequired,
};

function Ghost({ children }) {
  return (
    <div className={cls(prefixCls('tag'), prefixCls('tag', 'ghost'))}>
      {children}
    </div>
  );
}

Ghost.propTypes = {
  children: PropTypes.node.isRequired,
};

function FlatBlack({ children }) {
  return (
    <div className={cls(prefixCls('tag'), prefixCls('tag', 'flat-black'))}>
      {children}
    </div>
  );
}

FlatBlack.propTypes = {
  children: PropTypes.node.isRequired,
};

function HashTag() {
  return (
    <div className={prefixCls('tag', 'topic-hash-tag')}>
      <div className={prefixCls('tag', 'topic-hash-tag', 'vertical')} />
      <div className={prefixCls('tag', 'topic-hash-tag', 'horizontal')} />
    </div>
  );
}

function Topic({ children }) {
  return (
    <div className={cls(prefixCls('tag'), prefixCls('tag', 'topic'))}>
      <HashTag />
      <div className={cls(prefixCls('tag', 'topic-text'))}>{children}</div>
    </div>
  );
}

Topic.propTypes = {
  children: PropTypes.node.isRequired,
};

function TopQualityReview({ size }) {
  return (
    <div
      className={cls(
        prefixCls('tag'),
        prefixCls('tag', 'top-quality-review'),
        prefixCls('tag', 'top-quality-review', size),
      )}
    />
  );
}

TopQualityReview.propType = {
  size: PropTypes.oneOf(['lg', 'md']),
};

TopQualityReview.defaultProps = {
  size: 'md',
};

function Level({ value }) {
  return (
    <div
      className={cls(
        prefixCls('tag'),
        prefixCls('tag', 'level'),
        prefixCls('tag', 'level', value),
      )}
    />
  );
}

Level.propTypes = {
  value(props, propName, componentName) {
    if (
      typeof props[propName] !== 'number' ||
      parseInt(props[propName]) !== props[propName] ||
      props[propName] < 1 ||
      props[propName] > 8
    ) {
      throw new Error(
        `Invalid prop \`${propName}\` of value \`${props[propName]}\` supplied to \`${componentName}\`, expected an integer from 1 to 8.`,
      );
    }
  },
};

function Vip({ value, size }) {
  return (
    <div
      className={cls(
        prefixCls('tag'),
        prefixCls('tag', 'vip'),
        prefixCls('tag', 'vip', value),
        prefixCls('tag', 'vip', size),
      )}
    />
  );
}

Vip.propTypes = {
  value: PropTypes.oneOf(['red', 'orange', 'blue']).isRequired,
  size: PropTypes.oneOf([24, 34, 38, 42]).isRequired,
};

export default function Tag({ type, value, size, bordered, children }) {
  if (type === types.SERVICE) {
    return <Service value={value} />;
  }
  if (type === types.RANKING_HORIZONTAL) {
    return <RankingHorizontal value={value} />;
  }
  if (type === types.RANKING_VERTICAL) {
    return <RankingVertical value={value} />;
  }
  if (type === types.CHAIN_CERTIFICATION) {
    return <ChainCertification />;
  }
  if (type === types.BLACK_PEARL) {
    return <BlackPearl />;
  }
  if (type === types.MUST_EAT_LIST) {
    return <MustEatList />;
  }
  if (type === types.MUST_LIVE_LIST) {
    return <MustLiveList />;
  }
  if (type === types.MUST_STROLL_LIST) {
    return <MustStrollList />;
  }
  if (type === types.MUST_PLAY_LIST) {
    return <MustPlayList />;
  }
  if (type === types.MUST_GO_LIST) {
    return <MustGoList />;
  }
  if (type === types.PRIMARY) {
    return <Primary size={size}>{children}</Primary>;
  }
  if (type === types.DISABLED) {
    return <Disabled size={size}>{children}</Disabled>;
  }
  if (type === types.FLAT) {
    return <Flat bordered={bordered}>{children}</Flat>;
  }
  if (type === types.SECONDARY) {
    return <Secondary>{children}</Secondary>;
  }
  if (type === types.GHOST) {
    return <Ghost>{children}</Ghost>;
  }
  if (type === types.FLAT_BLACK) {
    return <FlatBlack>{children}</FlatBlack>;
  }
  if (type === types.TOPIC) {
    return <Topic>{children}</Topic>;
  }
  if (type === types.TOP_QUALITY_REVIEW) {
    return <TopQualityReview size={size} />;
  }
  if (type === types.LEVEL) {
    return <Level value={value} />;
  }
  if (type === types.VIP) {
    return <Vip value={value} size={size} />;
  }
}

Tag.types = types;
Tag.services = services;
Tag.propTypes = {
  type: PropTypes.oneOf(Object.values(types)).isRequired,
  value: definePropTypeByType({
    [types.SERVICE]: Service,
    [types.RANKING_HORIZONTAL]: RankingHorizontal,
    [types.RANKING_VERTICAL]: RankingVertical,
    [types.LEVEL]: Level,
    [types.VIP]: Vip,
  }),
  size: definePropTypeByType({
    [types.PRIMARY]: Primary,
    [types.TOP_QUALITY_REVIEW]: TopQualityReview,
    [types.VIP]: Vip,
  }),
  bordered: definePropTypeByType({
    [types.FLAT]: Flat,
  }),
  children: definePropTypeByType({
    [types.PRIMARY]: Primary,
    [types.DISABLED]: Disabled,
    [types.SECONDARY]: Secondary,
    [types.GHOST]: Ghost,
    [types.FLAT_BLACK]: FlatBlack,
    [types.TOPIC]: Topic,
  }),
};

function definePropTypeByType(typeComponentMap, typeKey = 'type') {
  return function(props, propName, componentName) {
    if (typeComponentMap.hasOwnProperty(props[typeKey])) {
      return PropTypes.checkPropTypes(
        typeComponentMap[props[typeKey]].propTypes,
        props,
        propName,
        componentName,
      );
    }
  };
}
