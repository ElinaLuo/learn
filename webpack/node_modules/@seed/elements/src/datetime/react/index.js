import React, { Component } from 'react';

import PropTypes from 'prop-types';
import '../style/index.less';
import { prefixCls } from '@seed/ui-base';
const noop = () => {};
const preZero = (no) => {
  return no < 10 ? `0${no}` : no;
};

const getMD = (dateTime) => {
  return dateTime.getMonth() + 1 + '月' + dateTime.getDate() + '日';
};
const getYMD = (dateTime) => {
  return `${dateTime.getFullYear()}年${getMD(dateTime)}`;
};

const getHM = (dateTime) => {
  return `${preZero(dateTime.getMinutes())}:${preZero(dateTime.getSeconds())}`;
};

export default class DateTime extends Component {
  renderDateTime() {
    const { value, format } = this.props;
    let dateTime;
    if (!format && value) {
      // 没有格式化并且传入了值，返回距离当前时间多久
      const current = new Date();
      const newDate = typeof value === 'object' ? value : new Date(value);
      const timeDiff = current - newDate;
      // console.log(timeDiff);
      if (timeDiff >= 0) {
        // 过去时间
        if (0 <= timeDiff && timeDiff < 1000 * 60) {
          // 一分钟内
          return '刚刚';
        } else if (1000 * 60 <= timeDiff && timeDiff < 1000 * 60 * 60) {
          // 一小时内
          return Math.floor(timeDiff / (1000 * 60)) + '分钟前';
        } else if (
          1000 * 60 * 60 <= timeDiff &&
          timeDiff < 1000 * 60 * 60 * 24
        ) {
          // 一天内
          return Math.floor(timeDiff / (1000 * 60 * 60)) + '小时前';
        } else if (
          1000 * 60 * 60 * 24 <= timeDiff &&
          timeDiff < 1000 * 60 * 60 * 24 * 365
        ) {
          // 一年内
          return getMD(newDate);
        } else {
          return getYMD(newDate);
        }
      } else {
        if (typeof timeDiff === 'number') {
          // 传入的时间超过当前时间，返回默认格式
        }
      }
    }
    switch (typeof value) {
      case 'number':
      case 'string':
        // value 数字时间戳
        dateTime = new Date(value);
        //TODO 增加非法判断
        break;
      case 'undefined':
        // value 不传
        dateTime = new Date();
      case 'object':
        // value 是一个日期对象
        dateTime = value;
      default:
        throw Error('DateTime传入value值无效');
    }
    switch (format) {
      case 'hm':
        return getHM(dateTime);
      case 'md':
        return getMD(dateTime);
      case 'ymd':
        return getYMD(dateTime);
      case 'ymdhm':
      default:
        return `${getYMD(dateTime)} ${getHM(dateTime)}`;
    }
  }
  render() {
    const { style } = this.props;
    // 普通按钮
    return (
      <span style={style} className={prefixCls('datetime')}>
        {this.renderDateTime()}
      </span>
    );
  }
}

DateTime.propTypes = {
  value: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number,
    PropTypes.object,
  ]),
  format: PropTypes.string,
};
DateTime.defaultProps = {};
