import React, { Component } from 'react';

import PropTypes from 'prop-types';
import cls from 'classnames';
import '../style/index.less';
import { prefixCls } from '@seed/ui-base';
// import styles from '../style/index.less.module';
const noop = () => {};
export default class Button extends Component {
  constructor(props) {
    super(props);
    this.state = {
      press: false,
    };
  }

  touchEvents = {
    onTouchStart: (e) => {
      // disable按钮
      if (this.props.state === 'disable') return;
      this.setState({
        press: true,
      });
    },
    // onTouchMove:(e)=>{

    // },
    onTouchEnd: (e) => {
      if (this.props.state === 'disable') return;
      this.setState({
        press: false,
      });
      const { onClick = noop } = this.props;
      onClick(e);
    },
  };

  render() {
    const getBtnStyle = (state, level) => {
      // 状态、层级都为空
      if (!state && level) {
        return `btn${level}`;
      }
      if (state) {
        const lv = level ? level : 1;
        switch (state) {
          case 'normal':
            return `btn${lv}`;
          case 'press':
            return `btn${lv}_press`;
          case 'awaiting':
            return `btn${lv}_await`;
          case 'disable':
            return `btn_disable`;
        }
      }
      return `btn1`;
    };
    const {
      onClick = noop,
      size,
      state,
      level,
      children,
      style,
      width,
      text,
      icon,
      type,
      subType = 1,
      bold,
    } = this.props;
    if (type === 2) {
      // 文字按钮
      return (
        <a
          onClick={(e) => onClick(e)}
          className={cls(
            prefixCls('btn', 'type2'),
            prefixCls('btn', 'type2', `sub${subType}`),
            { [prefixCls('bold')]: bold },
          )}
          style={style}
        >
          {icon}
          {children || text}
        </a>
      );
    }
    if (type === 3) {
      // 悬浮按钮
      return (
        <div
          onClick={(e) => onClick(e)}
          className={cls(
            prefixCls('btn', 'type3'),
            prefixCls('btn', 'type3', `sub${subType}`),
            { [prefixCls('bold')]: bold },
          )}
          style={style}
        >
          {icon}
          {children || text}
        </div>
      );
    }

    // 普通按钮
    const classes = cls(
      prefixCls(`btn`),
      prefixCls(getBtnStyle(this.state.press ? 'press' : state, level)),
      size ? prefixCls(`size_${size}`) : prefixCls('size_m'),
    );
    return (
      <div style={style} className={classes} {...this.touchEvents}>
        {icon}
        {children || text}
      </div>
    );
  }
}

Button.propTypes = {
  size: PropTypes.oneOf(['s', 'm', 'l']),
  state: PropTypes.string,
  level: PropTypes.number, //改为rule
  type: PropTypes.number, //普通、文字、悬浮按钮
  style: PropTypes.object,
  children: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  icon: PropTypes.element,
  text: PropTypes.string,
};
Button.defaultProps = {
  type: 1, //type类型 1.是普通条形按钮 2.文字按钮 3.悬浮按钮
};
