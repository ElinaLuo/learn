import _extends from "@babel/runtime-corejs3/helpers/extends";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cls from 'classnames';
import "../style/index.css";
import { prefixCls } from '@seed/ui-base'; // import styles from '../style/index.less.module';

var noop = function noop() {};

var Button =
/*#__PURE__*/
function (_Component) {
  _inherits(Button, _Component);

  function Button(props) {
    var _this;

    _classCallCheck(this, Button);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Button).call(this, props));
    _this.touchEvents = {
      onTouchStart: function onTouchStart(e) {
        // disable按钮
        if (_this.props.state === 'disable') return;

        _this.setState({
          press: true
        });
      },
      // onTouchMove:(e)=>{
      // },
      onTouchEnd: function onTouchEnd(e) {
        if (_this.props.state === 'disable') return;

        _this.setState({
          press: false
        });

        var _this$props$onClick = _this.props.onClick,
            onClick = _this$props$onClick === void 0 ? noop : _this$props$onClick;
        onClick(e);
      }
    };
    _this.state = {
      press: false
    };
    return _this;
  }

  _createClass(Button, [{
    key: "render",
    value: function render() {
      var getBtnStyle = function getBtnStyle(state, level) {
        // 状态、层级都为空
        if (!state && level) {
          return "btn".concat(level);
        }

        if (state) {
          var lv = level ? level : 1;

          switch (state) {
            case 'normal':
              return "btn".concat(lv);

            case 'press':
              return "btn".concat(lv, "_press");

            case 'awaiting':
              return "btn".concat(lv, "_await");

            case 'disable':
              return "btn_disable";
          }
        }

        return "btn1";
      };

      var _this$props = this.props,
          _this$props$onClick2 = _this$props.onClick,
          _onClick = _this$props$onClick2 === void 0 ? noop : _this$props$onClick2,
          size = _this$props.size,
          state = _this$props.state,
          level = _this$props.level,
          children = _this$props.children,
          style = _this$props.style,
          width = _this$props.width,
          text = _this$props.text,
          icon = _this$props.icon,
          type = _this$props.type,
          _this$props$subType = _this$props.subType,
          subType = _this$props$subType === void 0 ? 1 : _this$props$subType,
          bold = _this$props.bold;

      if (type === 2) {
        // 文字按钮
        return React.createElement("a", {
          onClick: function onClick(e) {
            return _onClick(e);
          },
          className: cls(prefixCls('btn', 'type2'), prefixCls('btn', 'type2', "sub".concat(subType)), _defineProperty({}, prefixCls('bold'), bold)),
          style: style
        }, icon, children || text);
      }

      if (type === 3) {
        // 悬浮按钮
        return React.createElement("div", {
          onClick: function onClick(e) {
            return _onClick(e);
          },
          className: cls(prefixCls('btn', 'type3'), prefixCls('btn', 'type3', "sub".concat(subType)), _defineProperty({}, prefixCls('bold'), bold)),
          style: style
        }, icon, children || text);
      } // 普通按钮


      var classes = cls(prefixCls("btn"), prefixCls(getBtnStyle(this.state.press ? 'press' : state, level)), size ? prefixCls("size_".concat(size)) : prefixCls('size_m'));
      return React.createElement("div", _extends({
        style: style,
        className: classes
      }, this.touchEvents), icon, children || text);
    }
  }]);

  return Button;
}(Component);

export { Button as default };
Button.propTypes = {
  size: PropTypes.oneOf(['s', 'm', 'l']),
  state: PropTypes.string,
  level: PropTypes.number,
  //改为rule
  type: PropTypes.number,
  //普通、文字、悬浮按钮
  style: PropTypes.object,
  children: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  icon: PropTypes.element,
  text: PropTypes.string
};
Button.defaultProps = {
  type: 1 //type类型 1.是普通条形按钮 2.文字按钮 3.悬浮按钮

};