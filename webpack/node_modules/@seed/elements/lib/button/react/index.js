"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

require("../style/index.css");

var _uiBase = require("@seed/ui-base");

// import styles from '../style/index.less.module';
var noop = function noop() {};

var Button =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Button, _Component);

  function Button(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Button);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Button).call(this, props));
    _this.touchEvents = {
      onTouchStart: function onTouchStart(e) {
        // disable按钮
        if (_this.props.state === 'disable') return;

        _this.setState({
          press: true
        });
      },
      // onTouchMove:(e)=>{
      // },
      onTouchEnd: function onTouchEnd(e) {
        if (_this.props.state === 'disable') return;

        _this.setState({
          press: false
        });

        var _this$props$onClick = _this.props.onClick,
            onClick = _this$props$onClick === void 0 ? noop : _this$props$onClick;
        onClick(e);
      }
    };
    _this.state = {
      press: false
    };
    return _this;
  }

  (0, _createClass2.default)(Button, [{
    key: "render",
    value: function render() {
      var getBtnStyle = function getBtnStyle(state, level) {
        // 状态、层级都为空
        if (!state && level) {
          return "btn".concat(level);
        }

        if (state) {
          var lv = level ? level : 1;

          switch (state) {
            case 'normal':
              return "btn".concat(lv);

            case 'press':
              return "btn".concat(lv, "_press");

            case 'awaiting':
              return "btn".concat(lv, "_await");

            case 'disable':
              return "btn_disable";
          }
        }

        return "btn1";
      };

      var _this$props = this.props,
          _this$props$onClick2 = _this$props.onClick,
          _onClick = _this$props$onClick2 === void 0 ? noop : _this$props$onClick2,
          size = _this$props.size,
          state = _this$props.state,
          level = _this$props.level,
          children = _this$props.children,
          style = _this$props.style,
          width = _this$props.width,
          text = _this$props.text,
          icon = _this$props.icon,
          type = _this$props.type,
          _this$props$subType = _this$props.subType,
          subType = _this$props$subType === void 0 ? 1 : _this$props$subType,
          bold = _this$props.bold;

      if (type === 2) {
        // 文字按钮
        return _react.default.createElement("a", {
          onClick: function onClick(e) {
            return _onClick(e);
          },
          className: (0, _classnames.default)((0, _uiBase.prefixCls)('btn', 'type2'), (0, _uiBase.prefixCls)('btn', 'type2', "sub".concat(subType)), (0, _defineProperty2.default)({}, (0, _uiBase.prefixCls)('bold'), bold)),
          style: style
        }, icon, children || text);
      }

      if (type === 3) {
        // 悬浮按钮
        return _react.default.createElement("div", {
          onClick: function onClick(e) {
            return _onClick(e);
          },
          className: (0, _classnames.default)((0, _uiBase.prefixCls)('btn', 'type3'), (0, _uiBase.prefixCls)('btn', 'type3', "sub".concat(subType)), (0, _defineProperty2.default)({}, (0, _uiBase.prefixCls)('bold'), bold)),
          style: style
        }, icon, children || text);
      } // 普通按钮


      var classes = (0, _classnames.default)((0, _uiBase.prefixCls)("btn"), (0, _uiBase.prefixCls)(getBtnStyle(this.state.press ? 'press' : state, level)), size ? (0, _uiBase.prefixCls)("size_".concat(size)) : (0, _uiBase.prefixCls)('size_m'));
      return _react.default.createElement("div", (0, _extends2.default)({
        style: style,
        className: classes
      }, this.touchEvents), icon, children || text);
    }
  }]);
  return Button;
}(_react.Component);

exports.default = Button;
Button.propTypes = {
  size: _propTypes.default.oneOf(['s', 'm', 'l']),
  state: _propTypes.default.string,
  level: _propTypes.default.number,
  //改为rule
  type: _propTypes.default.number,
  //普通、文字、悬浮按钮
  style: _propTypes.default.object,
  children: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
  icon: _propTypes.default.element,
  text: _propTypes.default.string
};
Button.defaultProps = {
  type: 1 //type类型 1.是普通条形按钮 2.文字按钮 3.悬浮按钮

};